/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedlist;


import org.junit.*;
import static org.junit.Assert.*;


public class LinkedListTest {

  LinkedList list;
  @Before
  public void setUp() throws Exception {
    list = new LinkedList();
  }

  @Test public void testInsert() {
    list.insert("Something");
    assertTrue(list.head.value == "Something");
  }

  @Test public void testIncludes_true(){
    list.insert("Something");
    assertTrue("Should return boolean true when linked list has the value", list.includes("Something"));
  }

  @Test public void testIncludes_false(){
    assertFalse("Should return boolean false when linked list does not have the value.", list.includes(
        "Something"));
  }

  @Test public void testToString(){
    list.insert("a");
    list.insert("b");
    assertEquals("Returns a string of all values in the linked list.", "HEAD -> b -> a -> null", list.toString());
  }

  @Test public void testAppend(){
    list.append("Something");
    list.append("Another Thing");
    assertEquals("Test for append should add to the end of the linked list and then end with null", "HEAD -> " +
        "Something -> Another Thing -> null", list.toString());
  }

  @Test public void testInsertBefore(){
    list.append(1);
    list.append(3);
    list.append(2);
    list.append(8);
    list.append(9);
    list.insertBefore(5,8);
    assertEquals("Test should add a value before the target", "HEAD -> 1 -> 3 -> 2 -> 5 -> 8 -> 9 -> null",
        list.toString());
  }

  @Test public void testInsertAfter(){
    list.append(1);
    list.append(3);
    list.append(2);
    list.append(8);
    list.append(9);
    list.insertAfter(5, 8);
    assertEquals("Test should add value after the target", "HEAD -> 1 -> 3 -> 2 -> 8 -> 5 -> 9 -> null",
        list.toString());
  }

  @Test public void testKthFromEnd(){
    list.append(1);
    list.append(3);
    list.append(2);
    assertEquals("Test should return value that is position 1 from the end of the linked list", 1,
        list.kthFromEnd(2));
  }

  @Test (expected=IllegalArgumentException.class)
  public void testKthFromEnd_outOfBounds(){
    list.append(1);
    list.append(3);
    list.append(2);
    String actual = (String) list.kthFromEnd(-1);
    assertEquals("Test should return value that is position 1 from the end of the linked list", 0,
        actual);
  }

  @Test public void testMergeLists(){
    list.append(1);
    list.append(3);
    LinkedList listTwo = new LinkedList();
    listTwo.append(5);
    listTwo.append(9);
    listTwo.append(4);
    assertEquals("The two lists should be merged into one", "HEAD -> 1 -> 5 -> 3 -> 9 -> 4 -> null",
        LinkedList.mergeLists(list, listTwo).toString());
  }
}
